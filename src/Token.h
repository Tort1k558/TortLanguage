#pragma once
#include<string>
#include<vector>
enum class TokenType {
    EndOfFile = 0,
    Identifier,
    Number,
    Increment,
    Decrement,
    Plus,
    PlusAssign,
    Minus,
    MinusAssign,
    Mul,
    MulAssign,
    Div,
    DivAssign,
    Exponentiation,
    Equal,
    Less,
    LessOrEqual,
    More,
    MoreOrEqual,
    Not,
    And,
    Or,
    BitAnd,
    BitOr,
    Comma,
    Dot,
    Assign,
    While,
    Break,
    Continue,
    If,
    Else,
    Def,
    Bool,
    Int,
    Double,
    Void,
    String,
    Var,
    NonType,
    IntLiteral,
    TrueLiteral,
    FalseLiteral,
    DoubleLiteral,
    StringLiteral,
    Return,
    Cast,
    OpenParen,
    CloseParen,
    OpenBrace,
    CloseBrace,
    BlockStart,
    BlockStop,
    Semicolon,
    Colon,
    Print,
    Invalid
};
const std::vector<std::string> g_nameTypes = {
    "EndOfFile",
    "Identifier",
    "Number",
    "Increment",
    "Decrement",
    "Plus",
    "PlusAssign",
    "Minus",
    "MinusAssign",
    "Mul",
    "MulAssign",
    "Div",
    "DivAssign",
    "Exponentiation",
    "Equal",
    "Less",
    "LessOrEqual",
    "More",
    "MoreOrEqual",
    "Not",
    "LogicalAnd",
    "LogicalOr",
    "BitAnd",
    "BitOr",
    "Comma",
    "Dot",
    "Assign",
    "While",
    "Break",
    "Continue",
    "If",
    "Else",
    "Def",
    "Bool",
    "Int",
    "Double",
    "Void",
    "String",
    "Var",
    "NonType",
    "IntLiteral",
    "TrueLiteral",
    "FalseLiteral",
    "DoubleLiteral",
    "StringLiteral",
    "Return",
    "Cast",
    "OpenParen",
    "CloseParen",
    "OpenBrace",
    "CloseBrace",
    "BlockStart",
    "BlockStop",
    "Semicolon",
    "Colon",
    "Print",
    "Invalid"
};
struct Token {
    TokenType type;
    std::string value;
};